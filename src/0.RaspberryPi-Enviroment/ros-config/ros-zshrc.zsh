#!/usr/bin/env zsh

CLR_RST='\e[0m'
CLR_RED='\e[0;31m'
CLR_GREEN='\e[0;32m'
CLR_BROWN='\e[0;33m'
CLR_YELLOW='\e[1;33m'
CLR_BLUE='\e[0;34m'
CLR_PURPLE='\e[0;35m'
CLR_WHITE='\e[1;37m'

# TODO: You may want to modify them
CONFIGS_SUB_DIR=.conf
CONFIGS_DIR="`cat ~/.zshrc | grep ros-zshrc.zsh | cut -d' ' -f2- | rev | cut -d'/' -f2- | rev`/${CONFIGS_SUB_DIR}"

[ -d ${CONFIGS_DIR} ] || echo "${CLR_RED}Run ros setup.sh to create config files first!${CLR_RST}"
[ -f ${CONFIGS_DIR}/catkin_ws_location ] && export USER_CATKIN_WS_DEFAULT_LOCATION=`cat ${CONFIGS_DIR}/catkin_ws_location`
[ -f ${CONFIGS_DIR}/catkin_ws_name ] && export USER_CATKIN_WS_DEFAULT_NAME=`cat ${CONFIGS_DIR}/catkin_ws_name`

#---------------------------------------------- 
# Create new user workspace
function catwsnew() {
    local wsName=$1
    if [[ -z $wsName ]] ; then 
        echo "You need to give workspace's name first!" 
    else
        WS_PATH="${USER_CATKIN_WS_DEFAULT_LOCATION}/${wsName}/"

        mkdir -p ${WS_PATH}/src
        # Create workspace for projects and move in
        cd ${WS_PATH}/
        echo "Create ${wsName} Workspace"

        # Create actual workspace
        catkin_make
    fi
}

# Remove user workspace
function catwsrm() {
    local wsName=$1
    if [[ -z $wsName ]] ; then 
        echo "You need to give workspace's name first!" 
    else
        cd ~
        echo "Delete ${wsName}"
        rm -r ${wsName}
    fi
}

# Catkin_make macro
function catmake() {
    echo "Move to ${WS_DEFAULT_PATH}"
    cd ${WS_DEFAULT_PATH}
    catkin_make
}

# Create new user package in the default workspace
function catpkgnew() {
    local packageName=$1
    cd ${PKGS_DEFAULT_PATH}
    echo "Create new rospackage with name [${packageName}] to [${PKGS_DEFAULT_PATH}]"
    catkin_create_pkg ${packageName} std_msgs rospy roscpp 
    catmake
}

function catpkgrm() {
    local packageName=$1
    cd ${PKGS_DEFAULT_PATH}
    echo "Delete package ${packageName}"
    rm -r ${packageName}
}

function cat_env_echo() {
    echo "USER_CATKIN_WS_DEFAULT_LOCATION: ${USER_CATKIN_WS_DEFAULT_LOCATION}"
    echo "USER_CATKIN_WS_DEFAULT_NAME: ${USER_CATKIN_WS_DEFAULT_NAME}"
}

# ------------------------------------------------------------------

# Display most valuable ROS enviroment variables 
function ros_env_echo() {
    echo "${CLR_GREEN}ROS_LOCATION:${CLR_RST} `[ ${ROS_LOCATION} = "local" ] && echo ${CLR_BLUE} || echo ${CLR_YELLOW}`${ROS_LOCATION}${CLR_RST}"
    echo "${CLR_GREEN}ROS_HOSTNAME:${CLR_RST} ${ROS_HOSTNAME}"
    echo "${CLR_GREEN}ROS_IP:${CLR_RST} ${ROS_IP}"
    echo "${CLR_GREEN}ROS_MASTER_URI:${CLR_RST} ${ROS_MASTER_URI}"
}

# Move to local development 
function ros_local() {
    export ROS_LOCATION="local"
    export ROS_HOSTNAME=localhost
    export ROS_IP=127.0.0.1
    export ROS_MASTER_URI=http://127.0.0.1:11311/
}

# Move to remote development
function ros_remote() { 
    export ROS_LOCATION="remote"
    export ROS_HOSTNAME=`cat ${CONFIGS_DIR}/ros_remote.conf | grep ROS_HOSTNAME | cut -d'=' -f2-`
    export ROS_IP=`cat ${CONFIGS_DIR}/ros_remote.conf | grep ROS_IP | cut -d'=' -f2-`
    export ROS_MASTER_URI=`cat ${CONFIGS_DIR}/ros_remote.conf | grep ROS_MASTER_URI | cut -d'=' -f2-`
}

function ros_develop() {
    
    # If you want you can to change workspace from command line by giving to this function
    # the name of the workspace
    local wsName=$1
    if [[ ! -z $wsName ]] ; then 
        export USER_CATKIN_WS_DEFAULT_NAME=${wsName}
    fi

    # Autogenerated
    export WS_DEFAULT_PATH="${USER_CATKIN_WS_DEFAULT_LOCATION}/${USER_CATKIN_WS_DEFAULT_NAME}/"
    export PKGS_DEFAULT_PATH="${USER_CATKIN_WS_DEFAULT_LOCATION}/${USER_CATKIN_WS_DEFAULT_NAME}/src"

    # Source default catkin workspace
    if [ -f ${WS_DEFAULT_PATH}/devel/setup.zsh ]; then ; 
        source ${WS_DEFAULT_PATH}/devel/setup.zsh  
        local WS_DIR=`roscd ; pwd | rev | cut -d'/' -f2- | rev`
        echo "Current workspace: ${WS_DIR}"
        ros_env_echo
    else 
        echo "Please create ${USER_CATKIN_WS_DEFAULT_NAME} catkin workspace first or give valid workspace name and location"
    fi
}

ros_local
ros_develop


#####################################################################################################################

# -------------------------
# -------------------------

#   ${1} = message_if_user_param_is_empty      ${2} = command_to_execute      ${3} = user_param           
# function do_macro_or_info_user(){ [ -z "${3}" ] && emess ${1} || ( cmess ${2} && bash -c "${2}" ) } 
# function emess() { echo "${CLR_RED}${1}${CLR_RST}" }
# function cmess() { echo -e "${CLR_BLUE}$ ${CLR_WHITE}${1}${CLR_RST}\n" }

# Dislay both active topics and nodes
function rnt() {
    echo "${CLR_GREEN}-ROS Nodes-${CLR_RST}"
    rosnode list
    echo "${CLR_GREEN}-ROS Topics-${CLR_RST}"
    rostopic list
}

# aliases
alias crnt="clear && rnt"
alias cdrnt="clear && ros_develop && echo && rnt"
alias rni="rosnode info"
alias rti="rostopic info"
alias rms="rosmsg show"
alias rte="rostopic echo"
alias rtp="rostopic pub"
alias rtp1="rostopic pub -1"

# -------------------------
# -------------------------
